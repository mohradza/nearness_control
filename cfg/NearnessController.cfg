#! /usr/bin/env python

PACKAGE='nearness_control'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

group = gen.add_group("top")

dlimits = group.add_group("Depth Limit Parameters")
dlimits.add("d_limit_min", double_t, 0, "Min registered depth",                                     0,      0,      200             )
dlimits.add("d_limit_max", double_t, 0, "Max registered depth",                                     100,    0,      200             )

dfoview = group.add_group("Depth Sensor Field of View Parameters")
dfoview.add("d_fov_h_min_angle", double_t, 0, "Min horizontal field of view angle in rad",          -0.785, -3.142, 3.142           )
dfoview.add("d_fov_h_max_angle", double_t, 0, "Max horizontal field of view angle in rad",           0.785, -3.142, 3.142           )
dfoview.add("d_fov_v_min_angle", double_t, 0, "Min vertical field of view angle in rad",            -0.785, -3.142, 3.142           )
dfoview.add("d_fov_v_max_angle", double_t, 0, "Max vetical field of view angle in rad",              0.785, -3.142, 3.142           )

safetybox = group.add_group("Safety box parameters")
safetybox.add("front_safety_distance", double_t, 0, "Safety box front distance",                    .4,      0.0,       1           )
safetybox.add("side_safety_distance", double_t, 0, "Safety box side distance",                      .35,     0.0,       1           )

yawrate = group.add_group("Yaw Rate Controller Gains")
yawrate.add("yaw_rate_K_1", double_t, 0, "Yaw rate controller, lateral position gain",              1,      -10000, 10000           )
yawrate.add("yaw_rate_K_2", double_t, 0, "Yaw rate controller, yaw angle gain",                     1,      -10000, 10000           )
yawrate.add("yaw_rate_min", double_t, 0, "Yaw rate controller, minimum yaw rate",                   1,      -10000, 10000           )
yawrate.add("yaw_rate_max", double_t, 0, "Yaw rate controller, maximum yaw rate",                   1,      -10000, 10000           )
yawrate.add("K_edge_turn", double_t, 0, "Yaw rate controller, K gain during junctions",                   1,      -10, 10           )

fwrdspd = group.add_group("Forward Speed Controller Gains")
fwrdspd.add("forward_speed_K_1", double_t, 0, "Forward speed controller, gain 1",                   1,      -10, 10           )
fwrdspd.add("forward_speed_K_2", double_t, 0, "Forward speed controller, gain 2",                   1,      -10, 10           )
fwrdspd.add("forward_speed_K_3", double_t, 0, "Forward speed controller, gain 2",                   1,      -10, 10           )
fwrdspd.add("forward_speed_K_4", double_t, 0, "Forward speed controller, gain 2",                   1,      -10, 10           )
fwrdspd.add("forward_speed_K_N", double_t, 0, "Forward speed controller, gain 2",                   1,      -10, 10           )
fwrdspd.add("forward_speed_min", double_t, 0, "Forward speed controller, minimum forward speed",    1,      0.0, 1.0           )
fwrdspd.add("forward_speed_max", double_t, 0, "Forward speed controller, maximum forward speed",    1,      0.0, 10           )
fwrdspd.add("sf_fwd_vel", double_t, 0, "Forward velocity for testing sf control",                 .5,         0,    2           )
fwrdspd.add("alpha_fwd", double_t, 0, "LPF smoothing constant",                                    1,         0,    1          )

sf_yawrate = group.add_group("Small Field Yaw Rate Controller Gains")
sf_yawrate.add("sf_k_0"  , double_t, 0, "Yaw rate K gain",                                        1.5,         -10,    10           )
sf_yawrate.add("sf_c_psi", double_t, 0, "Yaw rate small field peak azimuthal position gain",     0.25,         -10,    10           )
sf_yawrate.add("sf_c_d"  , double_t, 0, "Yaw rate small field peak magnitude gain",               0.5,         -10,    10           )
sf_yawrate.add("num_fourier_terms" , int_t, 0, "Num of fourier terms for WF reconstruction",      3,         0,    10           )
sf_yawrate.add("k_thresh", double_t, 0, "Scalar gain for SF signal thresholding",                 3,         0,    10           )
sf_yawrate.add("terrain_thresh", double_t, 0, "Scalar gain for terrain signal thresholding",                 .2,         0,    10           )
sf_yawrate.add("k_node_dist", double_t, 0, "Scalar gain for node forward speed control",                 .5,         0.0,    2.0           )
sf_yawrate.add("k_node_angle", double_t, 0, "Scalar gain for node steering control",                 .5,         0.0,    5.0           )
sf_yawrate.add("node_center_dist_thresh", double_t, 0, "At a node distance thresh",                 .5,         0.0,    5.0           )

sf_terrain = group.add_group("Small Field Terrain")
sf_terrain.add("ter_k_0"    , double_t, 0, "Terrain SF K gain",                                      .75,         -10,    10           )
sf_terrain.add("ter_c_psi"  , double_t, 0, "Terrain SF azimuthal position gain",                     .25,         -10,    10           )
sf_terrain.add("ter_c_d"    , double_t, 0, "Terrain SF peak magnitude gain",                         0.5,         -10,    10           )
sf_terrain.add("ter_front_safety_radius"    , double_t, 0, "Terrain SF peak magnitude gain",         0.75,         0.0,    5           )

control_switches = group.add_group("Control Switches")
control_switches.add("use_wf_control", bool_t, 0, "Switch for turning on wf control",               False )
control_switches.add("use_sf_control", bool_t, 0, "Switch for turning on sf control",               False )
control_switches.add("merge_terrain_control", bool_t, 0, "Switch for turning on terrain control",     False)
control_switches.add("sf_terrain_control_only", bool_t, 0, "Switch for turning on terrain control",     False)
control_switches.add("use_junction_control", bool_t, 0, "Switch for turning on junction control",     False)
control_switches.add("do_deadend_detect", bool_t, 0, "Switch for turning on deadend detection",     False)
control_switches.add("use_half_scan", bool_t, 0, "Switch for only using the front half of the lidar scan",     True)
control_switches.add("use_rplidar_a3", bool_t, 0, "Switch for only using rplidar_a3 vs rplidar_s1",     True)
control_switches.add("check_for_stuck", bool_t, 0, "Switch for checking if robot is stuck",     False)
control_switches.add("use_safety", bool_t, 0, "Switch for turning safety checks on/off",     False)
control_switches.add("use_cliff_detection", bool_t, 0, "Switch for turning cliff detection on/off",     False)

deadend = group.add_group("Deadend Detector Parameters")
deadend.add("deadend_nearness_thresh", double_t, 0, "Deadend nearness threshold",                .1,      0.0, 1           )
deadend.add("deadend_vote_thresh", double_t, 0, "Deadend votes threshold",                          25,      1, 500           )
deadend.add("total_deadend_votes", double_t, 0, "Deadend total number of votes @ 10hz",             20,      1, 500           )
deadend.add("front_count_thresh", double_t, 0, "Percent of front laserscan that must be within the thresh",             .9,      0.0, 1.0           )
deadend.add("side_count_thresh", double_t, 0, "Percent of laserscan that must be within the thresh",             .9,      0.0, 1.0           )

safety_tower = group.add_group("Safety tower voting parameters")
deadend.add("safety_getting_close_num_votes", int_t, 0, "Safety getting close total number of votes",                20,      1, 100           )
deadend.add("safety_too_close_num_votes", int_t, 0, "Safety too close total number of votes",                20,      1, 100           )
deadend.add("safety_getting_close_vote_thresh", int_t, 0, "Safety getting close vote threshold",              5,       1, 100           )
deadend.add("safety_too_close_vote_thresh", int_t, 0, "Safety too close vote threshold",                      5,       1, 100           )

cliff = group.add_group("Cliff Detection Parameters")
cliff.add("safety_cliff_backup_speed", double_t, 0, "Backup speed after cliff detection (m/s)" ,    0.25,            0,   10           )
cliff.add("safety_cliff_backup_distance", double_t, 0, "Backup distance after cliff detection (m)" ,1,            0,   10           )
cliff.add("safety_cliff_sit_still_time", double_t, 0, "Sit still time after cliff detection (m/s)" ,0,            0,   100          )

safety_attitude = group.add_group("Safety attitude parameters")
deadend.add("roll_limit", double_t, 0, "Roll limit for vehicle attitude",                           .5,      0.0, 1.0           )
deadend.add("pitch_limit", double_t, 0, "Roll limit for vehicle attitude",                           .5,      0.0, 1.0           )


# First string value is node name, used only for generating documentation
# Second string value ("WfiFromDepthSensor") is name of class and generated
#    .h file, with "Config" added, so class WfiFromDepthSensoronfig
exit(gen.generate(PACKAGE, "nearness_controller", "NearnessController"))
